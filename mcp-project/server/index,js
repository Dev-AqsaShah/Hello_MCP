// import express from "express";
// // import { randomUUID } from "node:crypto";
// import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
// import { StreamableHTTPServerTransport } from "@modelcontextprotocol/sdk/server/streamableHttp.js";
// // import { isInitializeRequest } from "@modelcontextprotocol/sdk/types.js"



// const app = express();
// app.use(express.json());

// // Map to store transports by session ID
// const transports: = {};

// // Handle POST requests for client-to-server communication
// app.post('/mcp', async (req, res) => {
//   // Check for existing session ID
//   const sessionId = req.headers['mcp-session-id'] as string | undefined;
//   let transport: StreamableHTTPServerTransport;

//   if (sessionId && transports[sessionId]) {
//     // Reuse existing transport
//     transport = transports[sessionId];
//   } else if (!sessionId && isInitializeRequest(req.body)) {
//     // New initialization request
//     transport = new StreamableHTTPServerTransport({
//       sessionIdGenerator: () => randomUUID(),
//       onsessioninitialized: (sessionId) => {
//         // Store the transport by session ID
//         transports[sessionId] = transport;
//       },
//       // DNS rebinding protection is disabled by default for backwards compatibility. If you are running this server
//       // locally, make sure to set:
//       // enableDnsRebindingProtection: true,
//       // allowedHosts: ['127.0.0.1'],
//     });

//     // Clean up transport when closed
//     transport.onclose = () => {
//       if (transport.sessionId) {
//         delete transports[transport.sessionId];
//       }
//     };
//     const server = new McpServer({
//       name: "example-server",
//       version: "1.0.0"
//     });

//     // ... set up server resources, tools, and prompts ...

//     // Connect to the MCP server
//     await server.connect(transport);
//   } else {
//     // Invalid request
//     res.status(400).json({
//       jsonrpc: '2.0',
//       error: {
//         code: -32000,
//         message: 'Bad Request: No valid session ID provided',
//       },
//       id: null,
//     });
//     return;
//   }

//   // Handle the request
//   await transport.handleRequest(req, res, req.body);
// });

// // Reusable handler for GET and DELETE requests
// const handleSessionRequest = async (req: express.Request, res: express.Response) => {
//   const sessionId = req.headers['mcp-session-id'] as string | undefined;
//   if (!sessionId || !transports[sessionId]) {
//     res.status(400).send('Invalid or missing session ID');
//     return;
//   }
  
//   const transport = transports[sessionId];
//   await transport.handleRequest(req, res);
// };

// // Handle GET requests for server-to-client notifications via SSE
// app.get('/mcp', handleSessionRequest);

// // Handle DELETE requests for session termination
// app.delete('/mcp', handleSessionRequest);

// app.listen(3000);

import express from "express";
import { randomUUID } from "node:crypto";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StreamableHTTPServerTransport } from "@modelcontextprotocol/sdk/server/streamableHttp.js";
import { isInitializeRequest } from "@modelcontextprotocol/sdk/types.js";

const app = express();
app.use(express.json());

// Transports map to track sessions
const transports = {};

// POST handler for client-to-server communication
app.post('/mcp', async (req, res) => {
  const sessionId = req.headers['mcp-session-id'];

  let transport;

  if (sessionId && transports[sessionId]) {
    // Reuse existing transport
    transport = transports[sessionId];
  } else if (!sessionId && isInitializeRequest(req.body)) {
    // Create new transport
    transport = new StreamableHTTPServerTransport({
      sessionIdGenerator: () => randomUUID(),
      onsessioninitialized: (newSessionId) => {
        transports[newSessionId] = transport;
      },
    });

    // Clean up when session closes
    transport.onclose = () => {
      if (transport.sessionId) {
        delete transports[transport.sessionId];
      }
    };

    const server = new McpServer({
      name: "example-server",
      version: "1.0.0"
    });

    // Add tools/resources here if needed

    await server.connect(transport);
  } else {
    // Invalid request
    res.status(400).json({
      jsonrpc: '2.0',
      error: {
        code: -32000,
        message: 'Bad Request: No valid session ID provided',
      },
      id: null,
    });
    return;
  }

  // Handle the valid request
  await transport.handleRequest(req, res, req.body);
});

// GET and DELETE handler (reusable)
const handleSessionRequest = async (req, res) => {
  const sessionId = req.headers['mcp-session-id'];

  if (!sessionId || !transports[sessionId]) {
    res.status(400).send('Invalid or missing session ID');
    return;
  }

  const transport = transports[sessionId];
  await transport.handleRequest(req, res);
};

// SSE and DELETE session
app.get('/mcp', handleSessionRequest);
app.delete('/mcp', handleSessionRequest);

// Start server
app.listen(3000, () => {
  console.log("âœ… MCP Agent Server running on http://localhost:3000/mcp");
});
